Import necessary libraries
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

Load breast cancer dataset
data = load_breast_cancer()

Split dataset into features (X) and target (y)
X = data.data
y = data.target

Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

Preprocess data: handle missing values and feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

Classification Algorithm Implementation
algorithms = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Decision Tree Classifier": DecisionTreeClassifier(),
    "Random Forest Classifier": RandomForestClassifier(),
    "Support Vector Machine (SVM)": SVC(),
    "k-Nearest Neighbors (k-NN)": KNeighborsClassifier(n_neighbors=5)
}

Train and evaluate each algorithm
for name, algorithm in algorithms.items():
    algorithm.fit(X_train_scaled, y_train)
    y_pred = algorithm.predict(X_test_scaled)
    print(f"Algorithm: {name}")
    print(f"Accuracy: {accuracy_score(y_test, y_pred)}")
    print("Classification Report:")
    print(classification_report(y_test, y_pred))
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))
    print()
``"

**Preprocessing Steps:**

1. Loaded breast cancer dataset from scikit-learn library.
2. Split dataset into features (X) and target (y).
3. Split data into training and testing sets (80% for training and 20% for testing).
4. Scaled features using StandardScaler to ensure all features have similar ranges.

**Classification Algorithm Implementation:**

1. Logistic Regression: Suitable for binary classification problems.
2. Decision Tree Classifier: Effective for handling non-linear relationships.
3. Random Forest Classifier: Ensemble method for improved accuracy.
4. Support Vector Machine (SVM): Robust to noise and outliers.
5. k-Nearest Neighbors (k-NN): Simple, intuitive algorithm.

**Model Comparison:**

Compare accuracy scores and classification reports to determine the best and worst performing algorithms
